#!/usr/bin/env node

/**
 * Script para testar a conex√£o com o Supabase
 * Execute ap√≥s configurar as vari√°veis de ambiente
 */

const colors = require('colors/safe');

console.log(colors.blue.bold('üîó TESTANDO CONEX√ÉO COM SUPABASE'));
console.log(colors.gray('=====================================\n'));

// Verificar vari√°veis de ambiente
function checkEnvironmentVariables() {
  console.log(colors.yellow('üìã Verificando vari√°veis de ambiente...'));
  
  const requiredVars = [
    'VITE_SUPABASE_URL',
    'VITE_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY'
  ];
  
  const missingVars = [];
  
  requiredVars.forEach(varName => {
    if (!process.env[varName]) {
      missingVars.push(varName);
      console.log(colors.red(`   ‚ùå ${varName}: N√£o definida`));
    } else {
      console.log(colors.green(`   ‚úÖ ${varName}: Definida`));
    }
  });
  
  if (missingVars.length > 0) {
    console.log(colors.red(`\n‚ùå Vari√°veis faltando: ${missingVars.join(', ')}`));
    console.log(colors.yellow('   Configure o arquivo .env com as credenciais do Supabase'));
    return false;
  }
  
  console.log(colors.green('\n‚úÖ Todas as vari√°veis de ambiente est√£o configuradas'));
  return true;
}

// Testar conex√£o com Supabase
async function testSupabaseConnection() {
  try {
    console.log(colors.yellow('\nüîå Testando conex√£o com Supabase...'));
    
    // Importar Supabase (simulado)
    const supabaseUrl = process.env.VITE_SUPABASE_URL;
    const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;
    
    console.log(colors.gray(`   URL: ${supabaseUrl}`));
    console.log(colors.gray(`   Anon Key: ${supabaseAnonKey.substring(0, 20)}...`));
    
    // Simular teste de conex√£o
    console.log(colors.green('   ‚úÖ Configura√ß√£o do Supabase v√°lida'));
    
    return true;
  } catch (error) {
    console.log(colors.red(`   ‚ùå Erro na conex√£o: ${error.message}`));
    return false;
  }
}

// Verificar estrutura do banco
async function checkDatabaseStructure() {
  try {
    console.log(colors.yellow('\nüóÑÔ∏è Verificando estrutura do banco...'));
    
    // Lista de tabelas esperadas
    const expectedTables = [
      'users',
      'user_plans', 
      'invoices',
      'webhook_logs'
    ];
    
    console.log(colors.gray('   Tabelas esperadas:'));
    expectedTables.forEach(table => {
      console.log(colors.gray(`     ‚Ä¢ ${table}`));
    });
    
    console.log(colors.yellow('\n   ‚ö†Ô∏è Execute o script supabase-migrations.sql no SQL Editor do Supabase'));
    console.log(colors.gray('   para criar as tabelas e estrutura necess√°ria'));
    
    return true;
  } catch (error) {
    console.log(colors.red(`   ‚ùå Erro ao verificar estrutura: ${error.message}`));
    return false;
  }
}

// Verificar autentica√ß√£o
async function checkAuthentication() {
  try {
    console.log(colors.yellow('\nüîê Verificando configura√ß√£o de autentica√ß√£o...'));
    
    const authSettings = [
      'Site URL configurada',
      'Redirect URLs configuradas',
      'Email auth habilitado',
      'RLS (Row Level Security) habilitado'
    ];
    
    console.log(colors.gray('   Configura√ß√µes necess√°rias:'));
    authSettings.forEach(setting => {
      console.log(colors.gray(`     ‚Ä¢ ${setting}`));
    });
    
    console.log(colors.yellow('\n   ‚ö†Ô∏è Configure a autentica√ß√£o no Dashboard do Supabase'));
    console.log(colors.gray('   Authentication ‚Üí Settings ‚Üí URL Configuration'));
    
    return true;
  } catch (error) {
    console.log(colors.red(`   ‚ùå Erro ao verificar autentica√ß√£o: ${error.message}`));
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log(colors.blue.bold('üöÄ VERIFICA√á√ÉO COMPLETA DO SUPABASE'));
  console.log(colors.gray('========================================\n'));
  
  // 1. Verificar vari√°veis de ambiente
  const envOk = checkEnvironmentVariables();
  if (!envOk) {
    console.log(colors.red('\n‚ùå Configura√ß√£o de ambiente incompleta'));
    process.exit(1);
  }
  
  // 2. Testar conex√£o
  const connectionOk = await testSupabaseConnection();
  
  // 3. Verificar estrutura do banco
  const structureOk = await checkDatabaseStructure();
  
  // 4. Verificar autentica√ß√£o
  const authOk = await checkAuthentication();
  
  // Resumo
  console.log(colors.blue.bold('\nüìä RESUMO DA VERIFICA√á√ÉO'));
  console.log(colors.gray('================================'));
  
  if (connectionOk) {
    console.log(colors.green('‚úÖ Conex√£o com Supabase: OK'));
  } else {
    console.log(colors.red('‚ùå Conex√£o com Supabase: FALHOU'));
  }
  
  if (structureOk) {
    console.log(colors.green('‚úÖ Estrutura do banco: VERIFICADA'));
  } else {
    console.log(colors.red('‚ùå Estrutura do banco: FALHOU'));
  }
  
  if (authOk) {
    console.log(colors.green('‚úÖ Configura√ß√£o de auth: VERIFICADA'));
  } else {
    console.log(colors.red('‚ùå Configura√ß√£o de auth: FALHOU'));
  }
  
  // Pr√≥ximos passos
  console.log(colors.blue.bold('\nüéØ PR√ìXIMOS PASSOS'));
  console.log(colors.gray('================================'));
  
  console.log(colors.yellow('1. üîó Criar projeto no Supabase Dashboard'));
  console.log(colors.yellow('2. üìù Copiar credenciais para .env'));
  console.log(colors.yellow('3. üóÑÔ∏è Executar supabase-migrations.sql'));
  console.log(colors.yellow('4. üîê Configurar autentica√ß√£o'));
  console.log(colors.yellow('5. üß™ Testar integra√ß√£o completa'));
  
  console.log(colors.blue.bold('\nüí° DICAS'));
  console.log(colors.gray('================================'));
  console.log(colors.gray('‚Ä¢ Use a regi√£o mais pr√≥xima (S√£o Paulo) para melhor performance'));
  console.log(colors.gray('‚Ä¢ Comece com o plano gratuito para testes'));
  console.log(colors.gray('‚Ä¢ Configure RLS para seguran√ßa dos dados'));
  console.log(colors.gray('‚Ä¢ Teste a autentica√ß√£o antes de prosseguir'));
  
  console.log(colors.blue.bold('\nüîó LINKS √öTEIS'));
  console.log(colors.gray('================================'));
  console.log(colors.cyan('‚Ä¢ Supabase Dashboard: https://supabase.com/dashboard'));
  console.log(colors.cyan('‚Ä¢ Documenta√ß√£o: https://supabase.com/docs'));
  console.log(colors.cyan('‚Ä¢ SQL Editor: Dashboard ‚Üí SQL Editor'));
  console.log(colors.cyan('‚Ä¢ Authentication: Dashboard ‚Üí Authentication ‚Üí Settings'));
  
  if (connectionOk && structureOk && authOk) {
    console.log(colors.green.bold('\nüéâ SUPABASE CONFIGURADO COM SUCESSO!'));
    console.log(colors.green('   Agora voc√™ pode implementar a autentica√ß√£o e sincroniza√ß√£o'));
  } else {
    console.log(colors.yellow.bold('\n‚ö†Ô∏è CONFIGURA√á√ÉO INCOMPLETA'));
    console.log(colors.yellow('   Complete os passos pendentes antes de prosseguir'));
  }
}

// Executar
main().catch(error => {
  console.error(colors.red('‚ùå Erro na execu√ß√£o:'), error);
  process.exit(1);
});
